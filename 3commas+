// 3 Commas bot assistant, Seeking alpha!
// Check each DCA deal and manipulate various values like take profit level based on the depth of the safety orders.
// proposed control codes to be implemented during development.....
// DTP() - Dynamic tp boost on the deal based on some TBD market condition
// DSO() - Dynamic S.O. step scale on the bot based on some TBD market condition
// STP() - scaled tp boost on the deal based on SO count*modifier               (NOW FULLY WORKING)
// SL(,) - apply +ve stop loss on deal at specified point (%pnl,S.O. depth)     (3rd party API has missing implementation!)
// SPAWN(,) 	- allow additional deal or smart trade convert after (%pnl,S.O. depth) only if a Stop loss or TTP is set 
// SWAPCOIN()	- swap in hotest/safest trading pairs from lunar crush or similar RSS feed/api
// BLKLST()		- update blacklist with bad pairs, recent pumps etc (independant of bot/deal) every hour ?  
// Exclude any deals marked with the user notes text from being modified        (PARTIALLY IMPLEMENTED) 
// some scope revisions will be necessary to get he rest of these to work.

//import axios from 'axios';
import fs from 'fs';
import threeCommasAPI from '3commas-api-node';

const apiKey    = 'Key'; // Replace with your 3C API key
const apiSecret = 'Secret'; // secret key
const interval  = 60000 * 0.5;  // Interval 1Min*Number mins 
const logFile   = '3c_log.txt';
const api = new threeCommasAPI({
  apiKey: apiKey,
  apiSecret: apiSecret,
});
let checkmessage='Starting';

// Main endless loop
while (true) {
  console.clear();
  console.log(`3commas Assistant - Scanning Open DCA Positions .....`);
  await scanTradingDeals();
  log(`Scan loop complete, next interval is ${interval / 60000} Min.`);
  await sleep(interval);
}
//

async function scanTradingDeals() {
    try {
      // Fetch active bots and deals
      const activeBotsResponse = await api.getBots({
        limit: 50,        	
      });
      //log(JSON.stringify(activeBotsResponse))
      const activeDealsResponse = await api.getDeals({
        limit: 50,
        scope: 'active',                
      });
      //log(JSON.stringify(activeDealsResponse))

      if (activeDealsResponse.length === 0) {
        log(`No active deals found.`);
      } else {
        // Iterate through active deals and build a list for the table
        const tableData = [];

        for (const deal of activeDealsResponse) {
          const botid = deal.bot_id;
          const name = deal.bot_name;
          const coin = deal.to_currency;
          const pnl = parseFloat(deal.actual_profit_percentage); // Parse as float
          const formattedPNL = pnl >= 0 ? `+${pnl.toFixed(2)}` : pnl.toFixed(2); // Add a plus sign if positive
          const safetyOrders = parseFloat(deal.completed_safety_orders_count); // Parse as float
          const activeBot = activeBotsResponse.find(bot => bot.id === botid);
          let originTP = activeBot ? parseFloat(activeBot.take_profit) : 0;          
          let actualTP = parseFloat(deal.take_profit).toFixed(2); // Parse as float
          let dealSL   = parseFloat(deal.stop_loss_percentage).toFixed(2); // Stoploss on deal.
          let dealnote = deal.note
          let targetTP = null

          const firstColumns = {
            'Name': name,
            'Coin': coin.slice(0, -4),
            'PNL': formattedPNL,
            'S.O.': safetyOrders,
            'Bot TP%': originTP,
          };       
          let lastColumns;

          // Check if control code STP is present and deal isn't TA exit and notes field isnt set 
                 
          if ((name.includes('STP(')) && (Object.keys(deal.close_strategy_list).length === 0) && (!dealnote || !dealnote.includes("-STP"))) {
            checkmessage = 'Monitoring';                     
            let stpParameter = parseFloat(name.match(/STP\(([^)]+)\)/)[1]); // Extracting the value from STP(x)
            targetTP = (originTP + (safetyOrders * (stpParameter - 1))).toFixed(2);                                
            if (actualTP !== targetTP) { // Check if actual TP does not equal Target TP
              checkmessage = 'Updating';              
              console.log("Changes pending on deal",deal.id,actualTP,targetTP)
                         
              // Update the take profit for the deal
              try {                         
                await api.dealUpdateTp(deal.id, targetTP);
              } catch (updateError) {
                log(`Error updating take profit for deal ${deal.id}: ${updateError.message}`);
              }
              log(`Pair: ${coin.padEnd(10)} - Safety Orders: ${safetyOrders} - ${checkmessage} Take Profit: ${actualTP}% to ${targetTP}%` ,'hide');
            } 
                     
          } else {
            checkmessage =
            (dealnote && dealnote.includes("-STP" )) ? "STP Excluded" :                
                "Ignoring";            
          }

          // Check if control code SL is present and deal isn't TA exit                  
          if (name.includes('SL('))  {
            checkmessage = 'Monitoring';                     
            let slParameter1 = parseFloat(name.match(/SL\(([^,]+),([^)]+)\)/)[1]); // Extracting the value from SL(x,);
            let slParameter2 = parseInt(name.match(/SL\(([^,]+),([^)]+)\)/)[2], 10); // Extracting the value from SL(,x)
            // 3rd party API has missing implementation for doing anything with this!
            // console.log(slParameter1,slParameter2,dealSL)

            }
                  
          // Concatenate the table data arrays and push into tableData
          lastColumns = {
            'Target TP%': targetTP,
            'Deal TP%': actualTP,
            'Status': checkmessage,
          };           
          tableData.push({ ...firstColumns, ...lastColumns });     
          }

        if (tableData.length > 0) {          
          console.table(tableData);          		  
        }
      }
    } catch (error) {
      log(`Error fetching active deals: ${error.message}`);
    }    
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function log(message,mode) {
  const now = new Date();
  const options = {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false,
  };
  const timestamp = now.toLocaleString(undefined, options);
  if (mode !== 'hide') {
    console.log(`${timestamp} - ${message}`); // Log to the console
  }
  fs.appendFileSync(logFile, `${timestamp} - ${message}\n`, 'utf8'); // Append the message with timestamp to the log file
}
